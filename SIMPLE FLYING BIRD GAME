import pygame
import random

# Initialize Pygame
pygame.init()

# Constants
SCREEN_WIDTH = 600
SCREEN_HEIGHT = 600
BIRD_WIDTH = 40
BIRD_HEIGHT = 40
GRAVITY = 0.5  # Gravity for bird
FLAP_STRENGTH = -5  # Flap strength
PIPE_WIDTH = 40
PIPE_GAP = 300
INITIAL_PIPE_SPEED = 5  # Initial speed of pipes
SPEED_INCREASE = 40  # Speed increase per food collected
FOOD_RADIUS = 20  # Radius of food items
FOOD_SPEED = 2  # Speed at which food moves toward the bird
FOOD_SPAWN_RATE = 60  # Frames before spawning a new food
RAIN_COUNT = 200  # Increased number of raindrops

# Colors
EVENING_SKY = (255, 153, 51)  # Orange for evening sky
GREEN = (0, 255, 0)  # Green for grass and pipes
BLACK = (0, 0, 0)  # Bird color
RED = (255, 0, 0)  # Red for food
RAIN_COLOR = (173, 216, 230)  # Light blue for raindrops

# Set up the display
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption("Flying Bird Game")

# Bird class
class Bird:
    def __init__(self):
        self.x = 50
        self.y = SCREEN_HEIGHT // 2
        self.velocity = 0

    def flap(self):
        self.velocity = FLAP_STRENGTH

    def update(self):
        self.velocity += GRAVITY
        self.y += self.velocity
        # Prevent bird from going off-screen
        if self.y < 0:
            self.y = 0
        if self.y > SCREEN_HEIGHT:
            self.y = SCREEN_HEIGHT

    def draw(self):
        pygame.draw.rect(screen, BLACK, (self.x, self.y, BIRD_WIDTH, BIRD_HEIGHT))

# Food class
class Food:
    def __init__(self):
        self.x = random.randint(100, SCREEN_WIDTH - 50)
        self.y = random.randint(0, SCREEN_HEIGHT // 2)  # Start from the upper half

    def update(self, bird_x, bird_y):
        # Move food toward the bird
        if self.x < bird_x:
            self.x += FOOD_SPEED
        elif self.x > bird_x:
            self.x -= FOOD_SPEED

        if self.y < bird_y:
            self.y += FOOD_SPEED
        elif self.y > bird_y:
            self.y -= FOOD_SPEED

    def draw(self):
        pygame.draw.circle(screen, RED, (self.x, self.y), FOOD_RADIUS)

# Pipe class
class Pipe:
    def __init__(self):
        self.x = SCREEN_WIDTH
        self.height = random.randint(50, SCREEN_HEIGHT - PIPE_GAP - 50)

    def update(self, speed):
        self.x -= speed

    def draw(self):
        # Draw top pipe
        pygame.draw.rect(screen, GREEN, (self.x, 0, PIPE_WIDTH, self.height))
        # Draw bottom pipe
        pygame.draw.rect(screen, GREEN, (self.x, self.height + PIPE_GAP, PIPE_WIDTH, SCREEN_HEIGHT))

# Rain class
class Rain:
    def __init__(self):
        self.x = random.randint(0, SCREEN_WIDTH)
        self.y = random.randint(-SCREEN_HEIGHT, 0)
        self.length = random.randint(100, 100)
        self.speed = random.uniform(50, 15)  # Random fall speed for each raindrop

    def update(self):
        self.y += self.speed
        if self.y > SCREEN_HEIGHT:
            self.y = random.randint(-20, 0)
            self.x = random.randint(0, SCREEN_WIDTH)

    def draw(self):
        pygame.draw.line(screen, RAIN_COLOR, (self.x, self.y), (self.x, self.y + self.length), 1)

# Game Over Screen
def game_over(score):
    font = pygame.font.SysFont(None, 48)
    game_over_surface = font.render('Game Over!', True, BLACK)
    score_surface = font.render(f'Final Score: {score}', True, BLACK)
    restart_surface = font.render('Press Q to Restart or N to Quit', True, BLACK)

    screen.fill(EVENING_SKY)
    screen.blit(game_over_surface, (SCREEN_WIDTH // 2 - 100, SCREEN_HEIGHT // 2 - 100))
    screen.blit(score_surface, (SCREEN_WIDTH // 2 - 100, SCREEN_HEIGHT // 2))
    screen.blit(restart_surface, (SCREEN_WIDTH // 2 - 220, SCREEN_HEIGHT // 2 + 50))
    pygame.display.flip()

    waiting = True
    while waiting:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                exit()
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_q:  # Restart game
                    waiting = False
                    main()  # Restart the game
                if event.key == pygame.K_n:  # Quit game
                    pygame.quit()
                    exit()

# Game loop
def main():
    clock = pygame.time.Clock()
    bird = Bird()
    pipes = []
    foods = []
    rain_drops = [Rain() for _ in range(RAIN_COUNT)]  # Create raindrops
    score = 0
    frames_since_last_food = 0
    pipe_speed = INITIAL_PIPE_SPEED
    running = True

    # Spawn initial pipe
    pipes.append(Pipe())

    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False

        # Control the bird with arrow keys
        keys = pygame.key.get_pressed()
        if keys[pygame.K_UP]:  # Move up when the up arrow key is pressed
            bird.flap()

        # Update bird
        bird.update()

        # Pipe management
        if pipes[-1].x < SCREEN_WIDTH - 200:  # Spawn new pipe
            pipes.append(Pipe())
        for pipe in pipes:
            pipe.update(pipe_speed)

        # Remove off-screen pipes
        pipes = [pipe for pipe in pipes if pipe.x > -PIPE_WIDTH]

        # Check for collisions with pipes
        for pipe in pipes:
            if (bird.x + BIRD_WIDTH > pipe.x and bird.x < pipe.x + PIPE_WIDTH and
                    (bird.y < pipe.height or bird.y + BIRD_HEIGHT > pipe.height + PIPE_GAP)):
                game_over(score)  # Show game over screen

        # Food management
        frames_since_last_food += 1
        if frames_since_last_food >= FOOD_SPAWN_RATE:  # Spawn new food
            foods.append(Food())
            frames_since_last_food = 0

        # Update food and check for collection
        for food in foods[:]:
            food.update(bird.x, bird.y)  # Move food toward the bird
            if (bird.x + BIRD_WIDTH > food.x - FOOD_RADIUS and
                bird.x < food.x + FOOD_RADIUS and
                bird.y + BIRD_HEIGHT > food.y - FOOD_RADIUS and
                bird.y < food.y + FOOD_RADIUS):
                foods.remove(food)  # Remove food if collected
                score += 1  # Increase score
                pipe_speed += SPEED_INCREASE  # Increase pipe speed

        # Remove off-screen foods
        foods = [food for food in foods if food.y < SCREEN_HEIGHT]

        # Update and draw rain
        for rain in rain_drops:
            rain.update()  # Update rain position
            rain.draw()    # Draw each raindrop

        # Draw everything
        screen.fill(EVENING_SKY)  # Light orange evening sky background
        for pipe in pipes:
            pipe.draw()
        for food in foods:
            food.draw()
        bird.draw()

        # Draw the sun
        pygame.draw.circle(screen, (255, 255, 0), (500, 100), 30)  # Yellow sun at (500, 100)

        # Display score
        font = pygame.font.SysFont(None, 36)
        score_surface = font.render(f'Score: {score}', True, BLACK)
        screen.blit(score_surface, (10, 10))

        pygame.display.flip()
        clock.tick(30)

    pygame.quit()

if __name__ == "__main__":
    main()
